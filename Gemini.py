__version__ = (1, 0, 0)

# This file is a part of Hikka Userbot
# Code is NOT licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://github.com/hikariatama/Hikka

# You CAN edit this file without direct permission from the author.
# You can redistribute this file with any modifications.

# edit by @Hikimuro

# meta developer: @yg_modules
# scope: hikka_only
# scope: hikka_min 1.6.3

# requires: google-generativeai pillow

import google.generativeai as genai
import os
from PIL import Image, ImageOps
import asyncio

from .. import loader, utils

@loader.tds
class gemini(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Gemini AI"""

    strings = {"name": "gemini"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "api_key",
                "",
                "API –∫–ª—é—á –¥–ª—è Gemini AI (aistudio.google.com/apikey)",
                validator=loader.validators.Hidden(loader.validators.String()),
            ),
            loader.ConfigValue(
                "model_name",
                "gemini-2.0-flash",
                "–ú–æ–¥–µ–ª—å –¥–ª—è Gemini AI.",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "system_instruction",
                "",
                "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Gemini AI.",
                validator=loader.validators.String(),
            ),
            loader.ConfigValue(
                "proxy",
                "",
                "–ü—Ä–æ–∫—Å–∏ (http://<user>:<pass>@<proxy>:<port> –∏–ª–∏ http://<proxy>:<port>)",
                validator=loader.validators.String(),
            ),
        )

    async def client_ready(self, client, db):
        self.client = client
        self.safety_settings = [
    {"category": "harm_category_harassment", "threshold": "block_none"},
    {"category": "harm_category_hate_speech", "threshold": "block_none"},
    {"category": "harm_category_sexually_explicit", "threshold": "block_none"},
    {"category": "harm_category_dangerous_content", "threshold": "block_none"},
    {"category": "harm_category_civic_integrity", "threshold": "block_none"},
]

        proxy = self.config["proxy"]
        if proxy:
            os.environ["http_proxy"] = proxy
            os.environ["HTTP_PROXY"] = proxy
            os.environ["https_proxy"] = proxy
            os.environ["HTTPS_PROXY"] = proxy

    async def geminicmd(self, message):
        """<reply to photo / text> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini.
–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro"""
        if not self.config["api_key"]:
            await message.edit(
                "<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω. –ü–æ–ª—É—á–∏ –µ–≥–æ –Ω–∞ aistudio.google.com/apikey –∏ —É–∫–∞–∂–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ</b>"
            )
            return

        prompt = utils.get_args_raw(message)
        media_path = None
        img = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if message.is_reply:
            reply = await message.get_reply_message()
            try:
                if hasattr(reply, "media") and reply.media and reply.photo:
                    await message.edit("<b><emoji document_id=5386367538735104399>‚åõÔ∏è</emoji> –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...</b>")
                    media_path = await reply.download_media()
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {e}")
                return

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
        if media_path:
            try:
                img = await asyncio.to_thread(Image.open, media_path)
                img = ImageOps.exif_transpose(img)
                img = img.convert("RGB")
                await asyncio.to_thread(img.thumbnail, (512, 512))  # –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            except Exception as e:
                await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b> {e}")
                if os.path.exists(media_path):
                    os.remove(media_path)
                return

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if not prompt and not img:
            await message.edit(
                "<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <i>–í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</i>"
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        edit_message = (
            f"<emoji document_id=5443038326535759644>üí¨</emoji> <b>–í–æ–ø—Ä–æ—Å:</b> {prompt}\n\n"
            if prompt else
            "<emoji document_id=5443038326535759644>üí¨</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini (–ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é):</b> <emoji document_id=4988080790286894217>ü´•</emoji>"
        )
        await message.edit(edit_message)

        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
            genai.configure(api_key=self.config["api_key"])
            system_instruction = self.config["system_instruction"] or None
            model = genai.GenerativeModel(
                model_name=self.config["model_name"],
                system_instruction=system_instruction,
                safety_settings=self.safety_settings,
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏/–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
            if img:
                response = await asyncio.to_thread(model.generate_content, [prompt, img] if prompt else ["", img])
            else:
                response = await asyncio.to_thread(model.generate_content, [prompt])

            reply_text = response.text.strip()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.edit(
                f"<emoji document_id=5325547803936572038>‚ú®</emoji> <b>–û—Ç–≤–µ—Ç –æ—Ç Gemini:</b> {reply_text}"
            )

        except Exception as e:
            await message.edit(f"<emoji document_id=5274099962655816924>‚ùóÔ∏è</emoji> <b>–û—à–∏–±–∫–∞:</b> {e}")

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω
            if media_path and os.path.exists(media_path):
                try:
                    os.remove(media_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
