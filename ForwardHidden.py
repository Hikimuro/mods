# üîß Module: ForwardHidden
# üë§ Developer: @Hikimuro
# üß© Version: 1.0.0

from telethon.tl.types import Message
from .. import loader, utils

@loader.tds
class ForwardHiddenMod(loader.Module):
    """
‚ñ´Ô∏è -fh <chat_id> <–∫–æ–ª-–≤–æ> ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
‚ñ´Ô∏è -getid [username –∏–ª–∏ –ø—É—Å—Ç–æ] ‚Äî –ø–æ–ª—É—á–∏—Ç—å chat_id –∫–∞–Ω–∞–ª–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–∞—Ç–∞
‚ñ´Ô∏è -listch ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, –≥–¥–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω
    """

    strings = {"name": "ForwardHidden"}

    @loader.command()
    async def getid(self, message: Message):
        """[username] ‚Äî –ø–æ–ª—É—á–∏—Ç—å chat_id –∫–∞–Ω–∞–ª–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–∞—Ç–∞"""
        args = utils.get_args_raw(message)
        if args:
            try:
                entity = await message.client.get_entity(args)
            except Exception as e:
                return await utils.answer(message, f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {e}")
        else:
            entity = await message.get_chat()

        chat_id = entity.id
        title = getattr(entity, "title", "‚Äî")
        await utils.answer(message, f"<b>üÜî chat_id:</b> <code>{chat_id}</code>\n<b>üìõ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {title}")

    @loader.command()
    async def listch(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, –≥–¥–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω"""
        dialogs = await message.client.get_dialogs()
        lines = []
        for d in dialogs:
            entity = d.entity
            if getattr(entity, 'megagroup', False) or getattr(entity, 'broadcast', False):
                chat_id = entity.id
                title = entity.title or "‚Äî"
                lines.append(f"{title}\nüÜî <code>{chat_id}</code>\n")

        if not lines:
            await utils.answer(message, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø.")
            return

        text = "<b>üìã –ö–∞–Ω–∞–ª—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã, –≥–¥–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω:</b>\n\n" + "\n".join(lines)
        await utils.answer(message, text)

    @loader.command()
    async def fh(self, message: Message):
        """<chat_id> <–∫–æ–ª-–≤–æ> ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç"""
        args = utils.get_args_raw(message)
        if not args or len(args.split()) < 2:
            return await utils.answer(
                message,
                "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.fh -1001234567890 20</code>\n"
                "‚ùì –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id: –∏—Å–ø–æ–ª—å–∑—É–π .listch –∏–ª–∏ .getid"
            )

        chat_id, count = args.split()
        try:
            count = int(count)
        except ValueError:
            return await utils.answer(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")

        msgs = []
        async for msg in message.client.iter_messages(chat_id, limit=count):
            if msg.text or msg.media:
                msgs.append(msg)

        if not msgs:
            return await utils.answer(message, "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")

        await utils.answer(message, f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π...")

        for msg in reversed(msgs):
            text = msg.text or ""
            markup = msg.reply_markup
            sender = await msg.get_sender()
            author = f"\n\nüë§ <b>–û—Ç:</b> {getattr(sender, 'first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

            if msg.media:
                await message.client.send_file(
                    message.chat_id,
                    msg.media,
                    caption=text + author,
                    reply_markup=markup
                )
            else:
                await message.client.send_message(
                    message.chat_id,
                    text + author,
                    reply_markup=markup
                )

        await utils.answer(message, "‚úÖ –ì–æ—Ç–æ–≤–æ.")
