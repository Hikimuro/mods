# module ForwardHidden
# meta developer @Hikimuro

from .. import loader, utils
from telethon.tl.types import Message
import os
import asyncio

__meta__ = {
    "name": "ForwardHidden",
    "developer": "@Hikimuro"
}

@loader.tds
class ForwardHiddenMod(loader.Module):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–∏—Ö —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ"""
    strings = {
        "name": "ForwardHidden",
        "send_failed": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {}",
        "done": "‚úÖ –ì–æ—Ç–æ–≤–æ.",
        "no_msgs": "‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.",
        "sending": "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–π...",
        "getid_fail": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id: {}",
        "usage": "<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.fh 1655808918 20</code>\n‚ùì –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å chat_id: –∏—Å–ø–æ–ª—å–∑—É–π .listch –∏–ª–∏ .getid",
    }

    async def send_message(self, message, msg):
        text = msg.text or ""
        sender = await msg.get_sender()
        author = f"\n\nüë§ <b>–û—Ç:</b> {getattr(sender, 'first_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"

        try:
            if msg.media:
                file = await message.client.download_media(msg.media)
                await message.client.send_file(
                    message.chat_id,
                    file,
                    caption=text + author if text else author,
                )
                if file and os.path.exists(file):
                    try:
                        os.remove(file)
                    except Exception:
                        pass
            else:
                await message.client.send_message(
                    message.chat_id,
                    text + author
                )
        except Exception as e:
            await utils.answer(message, self.strings("send_failed").format(e))

    @loader.command()
    async def fh(self, message: Message):
        """<chat_id> <–∫–æ–ª-–≤–æ> ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç (–æ–±—Ö–æ–¥ –∑–∞–ø—Ä–µ—Ç–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏)"""
        args = utils.get_args_raw(message)
        if not args or len(args.split()) < 2:
            return await utils.answer(message, self.strings("usage", message))

        chat_id_str, count_str = args.split()
        try:
            count = int(count_str)
        except ValueError:
            return await utils.answer(message, "‚ö†Ô∏è –£–∫–∞–∂–∏ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")

        try:
            chat_id = int(chat_id_str)
        except Exception:
            try:
                entity = await message.client.get_entity(chat_id_str)
                chat_id = entity.id
            except Exception as e:
                return await utils.answer(message, self.strings("getid_fail", message).format(e))

        msgs = []
        try:
            async for msg in message.client.iter_messages(chat_id, limit=count):
                if msg.text or msg.media:
                    msgs.append(msg)
        except Exception as e:
            return await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        if not msgs:
            return await utils.answer(message, self.strings("no_msgs", message))

        await utils.answer(message, self.strings("sending", message).format(len(msgs)))

        semaphore = asyncio.Semaphore(3)

        async def sem_send(msg):
            async with semaphore:
                await self.send_message(message, msg)

        tasks = [asyncio.create_task(sem_send(msg)) for msg in reversed(msgs)]
        await asyncio.gather(*tasks)

        await utils.answer(message, self.strings("done", message))

    @loader.command()
    async def getid(self, message: Message):
        """[username –∏–ª–∏ –ø—É—Å—Ç–æ] ‚Äî –ø–æ–ª—É—á–∏—Ç—å chat_id –∫–∞–Ω–∞–ª–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–∞—Ç–∞"""
        args = utils.get_args_raw(message)
        try:
            if args:
                entity = await message.client.get_entity(args)
            else:
                entity = await message.client.get_entity(message.chat_id)
            await utils.answer(message, f"<b>{getattr(entity, 'title', '–ß–∞—Ç')}:</b>\n<code>{entity.id}</code>")
        except Exception as e:
            await utils.answer(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å chat_id: {e}")

    @loader.command()
    async def listch(self, message: Message):
        """‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, –≤–∫–ª—é—á–∞—è –∑–∞–∫—Ä—ã—Ç—ã–µ"""
        result = "<b>üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>\n\n"
        async for dialog in message.client.iter_dialogs():
            entity = dialog.entity
            if getattr(entity, "megagroup", False) or getattr(entity, "broadcast", False):
                name = utils.escape_html(getattr(entity, "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
                chat_id = entity.id
                result += f"<b>{name}</b>\n<code>{chat_id}</code>\n\n"

        if result.strip() == "<b>üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:</b>":
            result += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        await utils.answer(message, result)
