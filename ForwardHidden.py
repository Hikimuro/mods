# ForwardHidden 
# meta developer: @Hikimuro
# ver. 1.0.1

from .. import loader, utils
import os

@loader.tds
class ForwardHiddenMod(loader.Module):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä—ã—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–∞–∂–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –º–µ–¥–∏–∞)"""
    strings = {
        "name": "ForwardHidden"
    }

    async def client_ready(self, client, db):
        self.client = client

    @loader.command()
    async def fh(self, message):
        """-fh <chat_id> <–∫–æ–ª-–≤–æ> ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç"""
        args = utils.get_args(message)
        if len(args) < 2:
            return await utils.answer(message, "‚ùó –£–∫–∞–∂–∏ chat_id –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")

        chat_id = args[0]
        try:
            count = int(args[1])
        except ValueError:
            return await utils.answer(message, "‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")

        try:
            async for msg in self.client.iter_messages(chat_id, limit=count):
                file_path = None
                try:
                    if msg.media:
                        file_path = await self.client.download_media(msg)
                        if file_path:
                            await self.client.send_file(
                                message.chat_id,
                                file_path,
                                caption=msg.text or msg.message or "",
                                buttons=msg.buttons,
                                reply_to=message.reply_to_msg_id,
                            )
                    elif msg.text:
                        await self.client.send_message(
                            message.chat_id,
                            msg.text,
                            buttons=msg.buttons,
                            reply_to=message.reply_to_msg_id,
                        )
                finally:
                    if file_path and os.path.exists(file_path):
                        os.remove(file_path)
        except Exception as e:
            await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")

    @loader.command()
    async def getid(self, message):
        """-getid [username –∏–ª–∏ –ø—É—Å—Ç–æ] ‚Äî –ø–æ–ª—É—á–∏—Ç—å chat_id –∫–∞–Ω–∞–ª–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–∞—Ç–∞"""
        args = utils.get_args(message)
        try:
            if args:
                entity = await self.client.get_entity(args[0])
            elif message.is_reply:
                entity = (await message.get_reply_message()).peer_id
            else:
                entity = await self.client.get_entity(message.chat_id)
            await utils.answer(message, f"üÜî ID: `{entity.id}`\n–ü–æ–ª–Ω—ã–π ID: `{entity.id if str(entity.id).startswith('-100') else '-100' + str(entity.id)}`")
        except Exception as e:
            await utils.answer(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID\n{e}")

    @loader.command()
    async def listch(self, message):
        """-listch ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø, –≥–¥–µ —Ç—ã –ø–æ–¥–ø–∏—Å–∞–Ω"""
        result = []
        async for dialog in self.client.iter_dialogs():
            if dialog.is_channel and not dialog.entity.broadcast:
                result.append(f"{dialog.name} ‚Äî `{dialog.id}`")
        if result:
            await utils.answer(message, "\n".join(result))
        else:
            await utils.answer(message, "‚ùó –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
