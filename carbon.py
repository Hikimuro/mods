#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# edited by @Hikimuro

# meta pic: https://img.icons8.com/stickers/500/000000/code.png
# meta banner: https://mods.hikariatama.ru/badges/carbon.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10
# requires: urllib requests

import io
import aiohttp
import logging
import os
import time
from PIL import Image
from telethon.tl.types import Message
from .. import loader, utils
from urllib.parse import urlparse
import asyncio

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)

class CarbonMod(loader.Module):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏ –∫–æ–¥–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro"""

    strings = {
        "name": "Carbon",
        "args": "<emoji document_id=5312526098750252863>üö´</emoji> <b>No code specified!</b>",
        "loading": "<emoji document_id=5213452215527677338>‚è≥</emoji> <b>Loading...</b>",
    }

    strings_ru = {
        "_cls_doc": "–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏ –∫–æ–¥–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro",
        "args": "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥!</b>",
        "loading": "<emoji document_id=5213452215527677338>‚è≥</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b>",
    }

    def __init__(self):
        self.cache_dir = "./carbon_cache"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not os.path.exists(self.cache_dir):
            os.makedirs(self.cache_dir)

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.clear_old_cache(max_age_days=7)

        self.config = loader.ModuleConfig(
            loader.ConfigValue("theme", "vsc-dark-plus", "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", validator=loader.validators.String()),
            loader.ConfigValue("color", "gray", "–¶–≤–µ—Ç —Ñ–æ–Ω–∞", validator=loader.validators.String()),
            loader.ConfigValue("language", "python", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", validator=loader.validators.String()),
            loader.ConfigValue("max_code_length_for_document", 1000, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç", validator=loader.validators.Integer()),
            loader.ConfigValue("background_image", "", "URL —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).", validator=loader.validators.String()),
            loader.ConfigValue("scale", 3, "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3) (0-5)", validator=loader.validators.Integer())
        )

    def clear_old_cache(self, max_age_days=7, only_background=False):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ max_age_days –¥–Ω–µ–π.
        –ï—Å–ª–∏ only_background=True, –æ—á–∏—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ–Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        """
        current_time = time.time()
        for filename in os.listdir(self.cache_dir):
            file_path = os.path.join(self.cache_dir, filename)
            if os.path.isfile(file_path):
                if only_background and not filename.endswith('.jpg'):  # –î–ª—è —Ñ–æ–Ω–∞ –º—ã —Ç–æ–ª—å–∫–æ –∏—â–µ–º .jpg
                    continue
                file_age_days = (current_time - os.path.getmtime(file_path)) / (60 * 60 * 24)
                if file_age_days > max_age_days:
                    try:
                        os.remove(file_path)
                        logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª: {file_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")

    async def carboncmd(self, message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞"""
        code = await self._get_code_from_sources(message)

        if not code:
            await utils.answer(message, self.strings("args"))
            return

        loading_message = await utils.answer(message, self.strings("loading"))
        try:
            doc = await self._generate_code_image(code)
            
            # –ï—Å–ª–∏ –∫–æ–¥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            if len(code) > self.config["max_code_length_for_document"]:
                await self.client.send_file(
                    utils.get_chat_id(message),
                    file=doc,
                    force_document=True,
                    reply_to=utils.get_topic(message) or await message.get_reply_message(),
                )
            else:
                # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await self.client.send_file(
                    utils.get_chat_id(message),
                    file=doc,
                    force_document=self._should_send_as_document(code),
                    reply_to=utils.get_topic(message) or await message.get_reply_message(),
                )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞: %s", str(e))
            await utils.answer(message, f"<b>Error: {str(e)}</b>")
        finally:
            await loading_message.delete()

    async def _get_code_from_sources(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –º–µ–¥–∏–∞"""
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        media_code = await self._get_code_from_media(message)
        reply_code = await self._get_code_from_media(reply)
        return next((c for c in [args, media_code, reply_code] if c), None)

    async def _get_code_from_media(self, message: Message) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ –∏–∑ –º–µ–¥–∏–∞, –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
        if not message or not getattr(message, "document", None):
            return ""
        if not message.document.mime_type.startswith("text/"):
            return ""
        try:
            return (await self.client.download_file(message.media, bytes)).decode("utf-8")
        except Exception as e:
            logger.warning("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ –º–µ–¥–∏–∞. ID=%s –û—à–∏–±–∫–∞=%s", message.id, str(e))
            return ""

    async def _generate_code_image(self, code: str) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API"""
        url = f'https://code2img.vercel.app/api/to-image?theme={self.config["theme"]}&language={self.config["language"]}&line-numbers=true&background-color={self.config["color"]}&scale={self.config["scale"]}'

        background_url = self.config["background_image"]
        if background_url:
            if not self._is_valid_url(background_url):
                raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL —Ñ–æ–Ω–∞: {background_url}")
            
            cache_path = os.path.join(self.cache_dir, "carbon_bg_cache.jpg")
            if not os.path.exists(cache_path):
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
                try:
                    async with aiohttp.ClientSession() as session:
                        async with session.get(background_url) as resp:
                            resp.raise_for_status()
                            if resp.status == 404:
                                raise Exception("–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                            with open(cache_path, "wb") as f:
                                f.write(await resp.read())
                            logger.info(f"–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫—ç—à: {cache_path}")
                except aiohttp.ClientError as e:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞: %s", str(e))
                    raise Exception("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                except Exception as e:
                    logger.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–∞: %s", str(e))
                    raise

            url += f"&background-image={cache_path}"

        headers = {"content-type": "text/plain"}
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, headers=headers, data=code.encode("utf-8")) as resp:
                    resp.raise_for_status()
                    img_data = io.BytesIO(await resp.read())
                    img_data.name = "carbonized.jpg"
                    return img_data
            except aiohttp.ClientError as e:
                logger.error("–û—à–∏–±–∫–∞ API Code2Img: %s", str(e))
                raise Exception("–û—à–∏–±–∫–∞ API Code2Img")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %s", str(e))
                raise Exception("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def _should_send_as_document(self, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–¥ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
        return len(code) > self.config["max_code_length_for_document"]

    def _is_valid_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ URL –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å"""
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except ValueError:
            return False
