#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# edited by @Hikimuro

# meta pic: https://img.icons8.com/stickers/500/000000/code.png
# meta banner: https://mods.hikariatama.ru/badges/carbon.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10
# requires: urllib requests

import io
import aiohttp
import logging
from PIL import Image, ImageOps
from telethon.tl.types import Message
from .. import loader, utils

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω—è–º–∏
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)  # –£—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–∏—Å—Ç–µ–º—ã
console_handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

class CarbonMod(loader.Module):
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏ –∫–æ–¥–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro"""

    strings = {
        "name": "Carbon",
        "args": "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥!</b>",
        "loading": "<emoji document_id=5213452215527677338>‚è≥</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("theme", "vsc-dark-plus", "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", validator=loader.validators.String()),
            loader.ConfigValue("color", "gray", "–¶–≤–µ—Ç —Ñ–æ–Ω–∞", validator=loader.validators.String()),
            loader.ConfigValue("language", "python", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", validator=loader.validators.String()),
            loader.ConfigValue("max_code_length_for_document", 1000, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç", validator=loader.validators.Integer()),
            loader.ConfigValue("background_image", "", "URL —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", validator=loader.validators.String()),
            loader.ConfigValue("scale", 2, "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)", validator=loader.validators.Integer())
        )

    async def carboncmd(self, message: Message):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞"""
        code = await self._get_code_from_sources(message)

        if not code:
            await utils.answer(message, self.strings("args"))
            return

        loading_message = await utils.answer(message, self.strings("loading"))
        try:
            doc = await self._generate_code_image(code)
            await self.client.send_file(
                utils.get_chat_id(message),
                file=doc,
                force_document=self._should_send_as_document(code),
                reply_to=utils.get_topic(message) or await message.get_reply_message(),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–¥–∞: {str(e)}")
            await utils.answer(message, f"<b>Error: {str(e)}</b>")
        finally:
            await loading_message.delete()

    async def _get_code_from_sources(self, message: Message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        code_sources = [
            utils.get_args_raw(message),
            await self._get_code_from_media(message),
            await self._get_code_from_media(await message.get_reply_message())
        ]
        return next((c for c in code_sources if c), None)

    async def _get_code_from_media(self, message: Message) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message or not getattr(message, "document", None):
            return ""

        if not message.document.mime_type.startswith("text/"):
            return ""

        try:
            return (await self.client.download_file(message.media, bytes)).decode("utf-8")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è. –°–æ–æ–±—â–µ–Ω–∏–µ: {message.id}, –û—à–∏–±–∫–∞: {str(e)}")
            return ""

    async def _generate_code_image(self, code: str) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ–¥–æ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        url = f'https://code2img.vercel.app/api/to-image?theme={self.config["theme"]}&language={self.config["language"]}&line-numbers=true&background-color={self.config["color"]}'

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω URL —Ñ–æ–Ω–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ–æ–Ω
        if self.config["background_image"]:
            background_image_url = self.config["background_image"]
            url += f"&background-image={background_image_url}"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä scale
        url += f"&scale={self.config['scale']}"

        headers = {"content-type": "text/plain"}

        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(url, headers=headers, data=code.encode("utf-8")) as response:
                    response.raise_for_status()  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å != 200
                    img_data = io.BytesIO(await response.read())
                    
                    # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ–Ω–∞
                    if self.config["background_image"]:
                        img_data = await self._apply_background(img_data)
                    
                    img_data.name = "carbonized.jpg"
                    return img_data
            except aiohttp.ClientError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Code2Img: URL={url}, –û—à–∏–±–∫–∞: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Code2Img: {str(e)}")
            except aiohttp.http_exceptions.HttpProcessingError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
                raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            except aiohttp.http_exceptions.ServerTimeoutError as e:
                logger.error(f"–¢–∞–π–º-–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
                raise Exception(f"–¢–∞–π–º-–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}")
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
                raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    async def _apply_background(self, img_data: io.BytesIO) -> io.BytesIO:
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π (–±–µ–∑ –æ–±—Ä–µ–∑–∫–∏)"""
    background_image_url = self.config["background_image"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    async with aiohttp.ClientSession() as session:
        async with session.get(background_image_url) as resp:
            background_img_data = io.BytesIO(await resp.read())
            background = Image.open(background_img_data).convert("RGBA")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞
    img_data.seek(0)
    img = Image.open(img_data).convert("RGBA")

    img_width, img_height = img.size
    bg_width, bg_height = background.size

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ–Ω –≤–Ω—É—Ç—Ä—å)
    scale_factor = min(img_width / bg_width, img_height / bg_height)
    new_size = (int(bg_width * scale_factor), int(bg_height * scale_factor))

    # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º —Ñ–æ–Ω –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ö–æ–ª—Å—Ç
    background = background.resize(new_size, Image.Resampling.LANCZOS)
    final_background = Image.new("RGBA", (img_width, img_height), (0, 0, 0, 0))

    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω –Ω–∞ —Ö–æ–ª—Å—Ç–µ
    left = (img_width - new_size[0]) // 2
    top = (img_height - new_size[1]) // 2
    final_background.paste(background, (left, top))

    # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–≤–µ—Ä—Ö —Ñ–æ–Ω–∞
    final_background.paste(img, (0, 0), img)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output = io.BytesIO()
    final_background.save(output, format="PNG")
    output.seek(0)

    return output
    
  def _should_send_as_document(self, code: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
        return len(code) > self.config["max_code_length_for_document"]
