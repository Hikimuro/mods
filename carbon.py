#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2022
#           https://t.me/hikariatama
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# edited by @Hikimuro

# meta pic: https://img.icons8.com/stickers/500/000000/code.png
# meta banner: https://mods.hikariatama.ru/badges/carbon.jpg
# meta developer: @hikarimods
# scope: hikka_only
# scope: hikka_min 1.2.10
# requires: urllib requests

import io import aiohttp from PIL import Image from telethon.tl.types import Message from .. import loader, utils

–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–º–µ–Ω–∞ ANTIALIAS –Ω–∞ LANCZOS, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è ANTIALIAS

Image.ANTIALIAS = Image.LANCZOS

@loader.tds class CarbonMod(loader.Module): """–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏ –∫–æ–¥–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro"""

strings = {
    "name": "Carbon",
    "args": "<emoji document_id=5312526098750252863>üö´</emoji> <b>No code specified!</b>",
    "loading": "<emoji document_id=5213452215527677338>‚è≥</emoji> <b>Loading...</b>",
}

strings_ru = {
    "_cls_doc": "–°–æ–∑–¥–∞–µ—Ç —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–µ —Ñ–æ—Ç–∫–∏ –∫–æ–¥–∞. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ @Hikimuro",
    "args": "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥!</b>",
    "loading": "<emoji document_id=5213452215527677338>‚è≥</emoji> <b>–û–±—Ä–∞–±–æ—Ç–∫–∞...</b>",
}

def __init__(self):
    self.config = loader.ModuleConfig(
        loader.ConfigValue("theme", "vsc-dark-plus", "–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", validator=loader.validators.String()),
        loader.ConfigValue("color", "gray", "–¶–≤–µ—Ç —Ñ–æ–Ω–∞", validator=loader.validators.String()),
        loader.ConfigValue("language", "python", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", validator=loader.validators.String()),
        loader.ConfigValue("max_code_length_for_document", 1000, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç", validator=loader.validators.Integer())
    )

async def carboncmd(self, message: Message):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–¥–∞"""
    code_sources = [
        utils.get_args_raw(message),
        await self._get_code_from_media(message),
        await self._get_code_from_media(await message.get_reply_message())
    ]
    code = next((c for c in code_sources if c), None)

    if not code:
        await utils.answer(message, self.strings("args"))
        return

    loading_message = await utils.answer(message, self.strings("loading"))
    doc = await self._generate_code_image(code)
    
    await self.client.send_file(
        utils.get_chat_id(message),
        file=doc,
        force_document=self._should_send_as_document(code),
        reply_to=utils.get_topic(message) or await message.get_reply_message(),
    )
    
    await loading_message.delete()

async def _get_code_from_media(self, message: Message) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message or not getattr(message, "document", None):
        return ""
    
    if not message.document.mime_type.startswith("text/"):
        return ""
    
    try:
        return (await self._client.download_file(message.media, bytes)).decode("utf-8")
    except Exception:
        return ""

async def _generate_code_image(self, code: str) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ–¥–æ–º (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    url = f'https://code2img.vercel.app/api/to-image?theme={self.config["theme"]}&language={self.config["language"]}&line-numbers=true&background-color={self.config["color"]}'
    headers = {"content-type": "text/plain"}

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, data=code.encode("utf-8")) as response:
            if response.status != 200:
                raise Exception("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Code2Img")
            
            img_data = io.BytesIO(await response.read())
            img_data.name = "carbonized.jpg"
            return img_data

def _should_send_as_document(self, code: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"""
    return len(code) > self.config["max_code_length_for_document"]
